{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Competition DATA612",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyMwSypMrgc4A69dZ3gdrJn6",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/melanieminson/data-612/blob/master/Competition_DATA612_Submission1\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LVothrkf1_HL",
        "colab_type": "text"
      },
      "source": [
        "# Data Exploration"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "B_oVU8_Xquxg",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "\n",
        "df = pd.read_csv('https://raw.githubusercontent.com/melanieminson/data-612/master/Competition%20Training%20Set%20with%20Status%20Group.csv', parse_dates=['date_recorded'])\n",
        "df_test = pd.read_csv('https://raw.githubusercontent.com/melanieminson/data-612/master/Competition%20Test%20Set.csv', parse_dates=['date_recorded'])\n",
        "df2 = pd.read_csv('https://raw.githubusercontent.com/melanieminson/data-612/master/Competition%20Training%20Set%20with%20Status%20Group.csv', parse_dates=['date_recorded'])\n"
      ],
      "execution_count": 64,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ejftaNNP66Zf",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "75848f6d-025d-4d21-dba9-e67baa7e5403"
      },
      "source": [
        "df.shape"
      ],
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(59400, 41)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 65
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "r91aeoPG68DR",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 408
        },
        "outputId": "0071c524-e6c0-4c60-abcb-0323d8d2cd0e"
      },
      "source": [
        "df.head()"
      ],
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>amount_tsh</th>\n",
              "      <th>date_recorded</th>\n",
              "      <th>funder</th>\n",
              "      <th>gps_height</th>\n",
              "      <th>installer</th>\n",
              "      <th>longitude</th>\n",
              "      <th>latitude</th>\n",
              "      <th>wpt_name</th>\n",
              "      <th>num_private</th>\n",
              "      <th>basin</th>\n",
              "      <th>subvillage</th>\n",
              "      <th>region</th>\n",
              "      <th>region_code</th>\n",
              "      <th>district_code</th>\n",
              "      <th>lga</th>\n",
              "      <th>ward</th>\n",
              "      <th>population</th>\n",
              "      <th>public_meeting</th>\n",
              "      <th>recorded_by</th>\n",
              "      <th>scheme_management</th>\n",
              "      <th>scheme_name</th>\n",
              "      <th>permit</th>\n",
              "      <th>construction_year</th>\n",
              "      <th>extraction_type</th>\n",
              "      <th>extraction_type_group</th>\n",
              "      <th>extraction_type_class</th>\n",
              "      <th>management</th>\n",
              "      <th>management_group</th>\n",
              "      <th>payment</th>\n",
              "      <th>payment_type</th>\n",
              "      <th>water_quality</th>\n",
              "      <th>quality_group</th>\n",
              "      <th>quantity</th>\n",
              "      <th>quantity_group</th>\n",
              "      <th>source</th>\n",
              "      <th>source_type</th>\n",
              "      <th>source_class</th>\n",
              "      <th>waterpoint_type</th>\n",
              "      <th>waterpoint_type_group</th>\n",
              "      <th>status_group</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>69572</td>\n",
              "      <td>6000.0</td>\n",
              "      <td>2011-03-14</td>\n",
              "      <td>Roman</td>\n",
              "      <td>1390</td>\n",
              "      <td>Roman</td>\n",
              "      <td>34.938093</td>\n",
              "      <td>-9.856322</td>\n",
              "      <td>none</td>\n",
              "      <td>0</td>\n",
              "      <td>Lake Nyasa</td>\n",
              "      <td>Mnyusi B</td>\n",
              "      <td>Iringa</td>\n",
              "      <td>11</td>\n",
              "      <td>5</td>\n",
              "      <td>Ludewa</td>\n",
              "      <td>Mundindi</td>\n",
              "      <td>109</td>\n",
              "      <td>True</td>\n",
              "      <td>GeoData Consultants Ltd</td>\n",
              "      <td>VWC</td>\n",
              "      <td>Roman</td>\n",
              "      <td>False</td>\n",
              "      <td>1999</td>\n",
              "      <td>gravity</td>\n",
              "      <td>gravity</td>\n",
              "      <td>gravity</td>\n",
              "      <td>vwc</td>\n",
              "      <td>user-group</td>\n",
              "      <td>pay annually</td>\n",
              "      <td>annually</td>\n",
              "      <td>soft</td>\n",
              "      <td>good</td>\n",
              "      <td>enough</td>\n",
              "      <td>enough</td>\n",
              "      <td>spring</td>\n",
              "      <td>spring</td>\n",
              "      <td>groundwater</td>\n",
              "      <td>communal standpipe</td>\n",
              "      <td>communal standpipe</td>\n",
              "      <td>functional</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>8776</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2013-03-06</td>\n",
              "      <td>Grumeti</td>\n",
              "      <td>1399</td>\n",
              "      <td>GRUMETI</td>\n",
              "      <td>34.698766</td>\n",
              "      <td>-2.147466</td>\n",
              "      <td>Zahanati</td>\n",
              "      <td>0</td>\n",
              "      <td>Lake Victoria</td>\n",
              "      <td>Nyamara</td>\n",
              "      <td>Mara</td>\n",
              "      <td>20</td>\n",
              "      <td>2</td>\n",
              "      <td>Serengeti</td>\n",
              "      <td>Natta</td>\n",
              "      <td>280</td>\n",
              "      <td>NaN</td>\n",
              "      <td>GeoData Consultants Ltd</td>\n",
              "      <td>Other</td>\n",
              "      <td>NaN</td>\n",
              "      <td>True</td>\n",
              "      <td>2010</td>\n",
              "      <td>gravity</td>\n",
              "      <td>gravity</td>\n",
              "      <td>gravity</td>\n",
              "      <td>wug</td>\n",
              "      <td>user-group</td>\n",
              "      <td>never pay</td>\n",
              "      <td>never pay</td>\n",
              "      <td>soft</td>\n",
              "      <td>good</td>\n",
              "      <td>insufficient</td>\n",
              "      <td>insufficient</td>\n",
              "      <td>rainwater harvesting</td>\n",
              "      <td>rainwater harvesting</td>\n",
              "      <td>surface</td>\n",
              "      <td>communal standpipe</td>\n",
              "      <td>communal standpipe</td>\n",
              "      <td>functional</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>34310</td>\n",
              "      <td>25.0</td>\n",
              "      <td>2013-02-25</td>\n",
              "      <td>Lottery Club</td>\n",
              "      <td>686</td>\n",
              "      <td>World vision</td>\n",
              "      <td>37.460664</td>\n",
              "      <td>-3.821329</td>\n",
              "      <td>Kwa Mahundi</td>\n",
              "      <td>0</td>\n",
              "      <td>Pangani</td>\n",
              "      <td>Majengo</td>\n",
              "      <td>Manyara</td>\n",
              "      <td>21</td>\n",
              "      <td>4</td>\n",
              "      <td>Simanjiro</td>\n",
              "      <td>Ngorika</td>\n",
              "      <td>250</td>\n",
              "      <td>True</td>\n",
              "      <td>GeoData Consultants Ltd</td>\n",
              "      <td>VWC</td>\n",
              "      <td>Nyumba ya mungu pipe scheme</td>\n",
              "      <td>True</td>\n",
              "      <td>2009</td>\n",
              "      <td>gravity</td>\n",
              "      <td>gravity</td>\n",
              "      <td>gravity</td>\n",
              "      <td>vwc</td>\n",
              "      <td>user-group</td>\n",
              "      <td>pay per bucket</td>\n",
              "      <td>per bucket</td>\n",
              "      <td>soft</td>\n",
              "      <td>good</td>\n",
              "      <td>enough</td>\n",
              "      <td>enough</td>\n",
              "      <td>dam</td>\n",
              "      <td>dam</td>\n",
              "      <td>surface</td>\n",
              "      <td>communal standpipe multiple</td>\n",
              "      <td>communal standpipe</td>\n",
              "      <td>functional</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>67743</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2013-01-28</td>\n",
              "      <td>Unicef</td>\n",
              "      <td>263</td>\n",
              "      <td>UNICEF</td>\n",
              "      <td>38.486161</td>\n",
              "      <td>-11.155298</td>\n",
              "      <td>Zahanati Ya Nanyumbu</td>\n",
              "      <td>0</td>\n",
              "      <td>Ruvuma / Southern Coast</td>\n",
              "      <td>Mahakamani</td>\n",
              "      <td>Mtwara</td>\n",
              "      <td>90</td>\n",
              "      <td>63</td>\n",
              "      <td>Nanyumbu</td>\n",
              "      <td>Nanyumbu</td>\n",
              "      <td>58</td>\n",
              "      <td>True</td>\n",
              "      <td>GeoData Consultants Ltd</td>\n",
              "      <td>VWC</td>\n",
              "      <td>NaN</td>\n",
              "      <td>True</td>\n",
              "      <td>1986</td>\n",
              "      <td>submersible</td>\n",
              "      <td>submersible</td>\n",
              "      <td>submersible</td>\n",
              "      <td>vwc</td>\n",
              "      <td>user-group</td>\n",
              "      <td>never pay</td>\n",
              "      <td>never pay</td>\n",
              "      <td>soft</td>\n",
              "      <td>good</td>\n",
              "      <td>dry</td>\n",
              "      <td>dry</td>\n",
              "      <td>machine dbh</td>\n",
              "      <td>borehole</td>\n",
              "      <td>groundwater</td>\n",
              "      <td>communal standpipe multiple</td>\n",
              "      <td>communal standpipe</td>\n",
              "      <td>non functional</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>19728</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2011-07-13</td>\n",
              "      <td>Action In A</td>\n",
              "      <td>0</td>\n",
              "      <td>Artisan</td>\n",
              "      <td>31.130847</td>\n",
              "      <td>-1.825359</td>\n",
              "      <td>Shuleni</td>\n",
              "      <td>0</td>\n",
              "      <td>Lake Victoria</td>\n",
              "      <td>Kyanyamisa</td>\n",
              "      <td>Kagera</td>\n",
              "      <td>18</td>\n",
              "      <td>1</td>\n",
              "      <td>Karagwe</td>\n",
              "      <td>Nyakasimbi</td>\n",
              "      <td>0</td>\n",
              "      <td>True</td>\n",
              "      <td>GeoData Consultants Ltd</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>True</td>\n",
              "      <td>0</td>\n",
              "      <td>gravity</td>\n",
              "      <td>gravity</td>\n",
              "      <td>gravity</td>\n",
              "      <td>other</td>\n",
              "      <td>other</td>\n",
              "      <td>never pay</td>\n",
              "      <td>never pay</td>\n",
              "      <td>soft</td>\n",
              "      <td>good</td>\n",
              "      <td>seasonal</td>\n",
              "      <td>seasonal</td>\n",
              "      <td>rainwater harvesting</td>\n",
              "      <td>rainwater harvesting</td>\n",
              "      <td>surface</td>\n",
              "      <td>communal standpipe</td>\n",
              "      <td>communal standpipe</td>\n",
              "      <td>functional</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "      id  amount_tsh  ... waterpoint_type_group    status_group\n",
              "0  69572      6000.0  ...    communal standpipe      functional\n",
              "1   8776         0.0  ...    communal standpipe      functional\n",
              "2  34310        25.0  ...    communal standpipe      functional\n",
              "3  67743         0.0  ...    communal standpipe  non functional\n",
              "4  19728         0.0  ...    communal standpipe      functional\n",
              "\n",
              "[5 rows x 41 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 66
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "A4Xq7zov6_23",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 781
        },
        "outputId": "00ceb742-f6f7-4710-a9e2-8a720247fc37"
      },
      "source": [
        "df.dtypes"
      ],
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "id                                int64\n",
              "amount_tsh                      float64\n",
              "date_recorded            datetime64[ns]\n",
              "funder                           object\n",
              "gps_height                        int64\n",
              "installer                        object\n",
              "longitude                       float64\n",
              "latitude                        float64\n",
              "wpt_name                         object\n",
              "num_private                       int64\n",
              "basin                            object\n",
              "subvillage                       object\n",
              "region                           object\n",
              "region_code                       int64\n",
              "district_code                     int64\n",
              "lga                              object\n",
              "ward                             object\n",
              "population                        int64\n",
              "public_meeting                   object\n",
              "recorded_by                      object\n",
              "scheme_management                object\n",
              "scheme_name                      object\n",
              "permit                           object\n",
              "construction_year                 int64\n",
              "extraction_type                  object\n",
              "extraction_type_group            object\n",
              "extraction_type_class            object\n",
              "management                       object\n",
              "management_group                 object\n",
              "payment                          object\n",
              "payment_type                     object\n",
              "water_quality                    object\n",
              "quality_group                    object\n",
              "quantity                         object\n",
              "quantity_group                   object\n",
              "source                           object\n",
              "source_type                      object\n",
              "source_class                     object\n",
              "waterpoint_type                  object\n",
              "waterpoint_type_group            object\n",
              "status_group                     object\n",
              "dtype: object"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 67
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bTnaDP-67CKZ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 781
        },
        "outputId": "bd4923eb-c131-41f2-ea75-b791a2f71f87"
      },
      "source": [
        "df.isnull().sum()"
      ],
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "id                           0\n",
              "amount_tsh                   0\n",
              "date_recorded                0\n",
              "funder                    3635\n",
              "gps_height                   0\n",
              "installer                 3655\n",
              "longitude                    0\n",
              "latitude                     0\n",
              "wpt_name                     0\n",
              "num_private                  0\n",
              "basin                        0\n",
              "subvillage                 371\n",
              "region                       0\n",
              "region_code                  0\n",
              "district_code                0\n",
              "lga                          0\n",
              "ward                         0\n",
              "population                   0\n",
              "public_meeting            3334\n",
              "recorded_by                  0\n",
              "scheme_management         3877\n",
              "scheme_name              28166\n",
              "permit                    3056\n",
              "construction_year            0\n",
              "extraction_type              0\n",
              "extraction_type_group        0\n",
              "extraction_type_class        0\n",
              "management                   0\n",
              "management_group             0\n",
              "payment                      0\n",
              "payment_type                 0\n",
              "water_quality                0\n",
              "quality_group                0\n",
              "quantity                     0\n",
              "quantity_group               0\n",
              "source                       0\n",
              "source_type                  0\n",
              "source_class                 0\n",
              "waterpoint_type              0\n",
              "waterpoint_type_group        0\n",
              "status_group                 0\n",
              "dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 68
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "S15JgNVM1lA8",
        "colab_type": "text"
      },
      "source": [
        "# Data Preprocessing"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "smVcGQPyGLi0",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "df.construction_year = df.construction_year.astype(str)\n",
        "df_test.construction_year = df_test.construction_year.astype(str)"
      ],
      "execution_count": 69,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Xz3zm5qwtNLB",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "b7ccdf39-d485-4d40-be35-48218e9df3bd"
      },
      "source": [
        "df['construction_year'].value_counts()"
      ],
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0       20709\n",
              "2010     2645\n",
              "2008     2613\n",
              "2009     2533\n",
              "2000     2091\n",
              "2007     1587\n",
              "2006     1471\n",
              "2003     1286\n",
              "2011     1256\n",
              "2004     1123\n",
              "2012     1084\n",
              "2002     1075\n",
              "1978     1037\n",
              "1995     1014\n",
              "2005     1011\n",
              "1999      979\n",
              "1998      966\n",
              "1990      954\n",
              "1985      945\n",
              "1980      811\n",
              "1996      811\n",
              "1984      779\n",
              "1982      744\n",
              "1994      738\n",
              "1972      708\n",
              "1974      676\n",
              "1997      644\n",
              "1992      640\n",
              "1993      608\n",
              "2001      540\n",
              "1988      521\n",
              "1983      488\n",
              "1975      437\n",
              "1986      434\n",
              "1976      414\n",
              "1970      411\n",
              "1991      324\n",
              "1989      316\n",
              "1987      302\n",
              "1981      238\n",
              "1977      202\n",
              "1979      192\n",
              "1973      184\n",
              "2013      176\n",
              "1971      145\n",
              "1960      102\n",
              "1967       88\n",
              "1963       85\n",
              "1968       77\n",
              "1969       59\n",
              "1964       40\n",
              "1962       30\n",
              "1961       21\n",
              "1965       19\n",
              "1966       17\n",
              "Name: construction_year, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 70
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RrVDWQ5eBWyX",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "df2.drop(df2.loc[df2['construction_year']==0].index, inplace=True)"
      ],
      "execution_count": 71,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hFQqAypcBaOR",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "cfce93a7-5a72-4d4b-df60-49fa18550424"
      },
      "source": [
        "all_region_mean = df2.construction_year.mean()\n",
        "\n",
        "print(all_region_mean)"
      ],
      "execution_count": 72,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1996.8146855857951\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "izSnYBbwBdLr",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 235
        },
        "outputId": "b7d78969-04d9-435f-f436-b6cdee896d05"
      },
      "source": [
        "region_mean = df2.groupby('region_code').construction_year.mean()\n",
        "df2['region_mean'] = df2['construction_year'].replace('0','region_mean')\n",
        "\n",
        "print(df2.region_mean)"
      ],
      "execution_count": 73,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0        1999\n",
            "1        2010\n",
            "2        2009\n",
            "3        1986\n",
            "5        2009\n",
            "         ... \n",
            "59391    1967\n",
            "59394    2007\n",
            "59395    1999\n",
            "59396    1996\n",
            "59399    2002\n",
            "Name: region_mean, Length: 38691, dtype: int64\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AGNr5zpf7RPb",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "df['new_cons_year'] = df['construction_year'].replace('0', df2.region_mean)\n",
        "df['new_cons_year'] = df['construction_year'].replace('0', '1997')\n",
        "\n",
        "df_test['new_cons_year'] = df_test['construction_year'].replace('0', df2.region_mean)\n",
        "df_test['new_cons_year'] = df_test['construction_year'].replace('0', '1997')"
      ],
      "execution_count": 74,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DDnpQ9DtL81a",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 408
        },
        "outputId": "20ccf180-e570-4f6e-93fa-68c0b0345d39"
      },
      "source": [
        "df.head()"
      ],
      "execution_count": 75,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>amount_tsh</th>\n",
              "      <th>date_recorded</th>\n",
              "      <th>funder</th>\n",
              "      <th>gps_height</th>\n",
              "      <th>installer</th>\n",
              "      <th>longitude</th>\n",
              "      <th>latitude</th>\n",
              "      <th>wpt_name</th>\n",
              "      <th>num_private</th>\n",
              "      <th>basin</th>\n",
              "      <th>subvillage</th>\n",
              "      <th>region</th>\n",
              "      <th>region_code</th>\n",
              "      <th>district_code</th>\n",
              "      <th>lga</th>\n",
              "      <th>ward</th>\n",
              "      <th>population</th>\n",
              "      <th>public_meeting</th>\n",
              "      <th>recorded_by</th>\n",
              "      <th>scheme_management</th>\n",
              "      <th>scheme_name</th>\n",
              "      <th>permit</th>\n",
              "      <th>construction_year</th>\n",
              "      <th>extraction_type</th>\n",
              "      <th>extraction_type_group</th>\n",
              "      <th>extraction_type_class</th>\n",
              "      <th>management</th>\n",
              "      <th>management_group</th>\n",
              "      <th>payment</th>\n",
              "      <th>payment_type</th>\n",
              "      <th>water_quality</th>\n",
              "      <th>quality_group</th>\n",
              "      <th>quantity</th>\n",
              "      <th>quantity_group</th>\n",
              "      <th>source</th>\n",
              "      <th>source_type</th>\n",
              "      <th>source_class</th>\n",
              "      <th>waterpoint_type</th>\n",
              "      <th>waterpoint_type_group</th>\n",
              "      <th>status_group</th>\n",
              "      <th>new_cons_year</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>69572</td>\n",
              "      <td>6000.0</td>\n",
              "      <td>2011-03-14</td>\n",
              "      <td>Roman</td>\n",
              "      <td>1390</td>\n",
              "      <td>Roman</td>\n",
              "      <td>34.938093</td>\n",
              "      <td>-9.856322</td>\n",
              "      <td>none</td>\n",
              "      <td>0</td>\n",
              "      <td>Lake Nyasa</td>\n",
              "      <td>Mnyusi B</td>\n",
              "      <td>Iringa</td>\n",
              "      <td>11</td>\n",
              "      <td>5</td>\n",
              "      <td>Ludewa</td>\n",
              "      <td>Mundindi</td>\n",
              "      <td>109</td>\n",
              "      <td>True</td>\n",
              "      <td>GeoData Consultants Ltd</td>\n",
              "      <td>VWC</td>\n",
              "      <td>Roman</td>\n",
              "      <td>False</td>\n",
              "      <td>1999</td>\n",
              "      <td>gravity</td>\n",
              "      <td>gravity</td>\n",
              "      <td>gravity</td>\n",
              "      <td>vwc</td>\n",
              "      <td>user-group</td>\n",
              "      <td>pay annually</td>\n",
              "      <td>annually</td>\n",
              "      <td>soft</td>\n",
              "      <td>good</td>\n",
              "      <td>enough</td>\n",
              "      <td>enough</td>\n",
              "      <td>spring</td>\n",
              "      <td>spring</td>\n",
              "      <td>groundwater</td>\n",
              "      <td>communal standpipe</td>\n",
              "      <td>communal standpipe</td>\n",
              "      <td>functional</td>\n",
              "      <td>1999</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>8776</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2013-03-06</td>\n",
              "      <td>Grumeti</td>\n",
              "      <td>1399</td>\n",
              "      <td>GRUMETI</td>\n",
              "      <td>34.698766</td>\n",
              "      <td>-2.147466</td>\n",
              "      <td>Zahanati</td>\n",
              "      <td>0</td>\n",
              "      <td>Lake Victoria</td>\n",
              "      <td>Nyamara</td>\n",
              "      <td>Mara</td>\n",
              "      <td>20</td>\n",
              "      <td>2</td>\n",
              "      <td>Serengeti</td>\n",
              "      <td>Natta</td>\n",
              "      <td>280</td>\n",
              "      <td>NaN</td>\n",
              "      <td>GeoData Consultants Ltd</td>\n",
              "      <td>Other</td>\n",
              "      <td>NaN</td>\n",
              "      <td>True</td>\n",
              "      <td>2010</td>\n",
              "      <td>gravity</td>\n",
              "      <td>gravity</td>\n",
              "      <td>gravity</td>\n",
              "      <td>wug</td>\n",
              "      <td>user-group</td>\n",
              "      <td>never pay</td>\n",
              "      <td>never pay</td>\n",
              "      <td>soft</td>\n",
              "      <td>good</td>\n",
              "      <td>insufficient</td>\n",
              "      <td>insufficient</td>\n",
              "      <td>rainwater harvesting</td>\n",
              "      <td>rainwater harvesting</td>\n",
              "      <td>surface</td>\n",
              "      <td>communal standpipe</td>\n",
              "      <td>communal standpipe</td>\n",
              "      <td>functional</td>\n",
              "      <td>2010</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>34310</td>\n",
              "      <td>25.0</td>\n",
              "      <td>2013-02-25</td>\n",
              "      <td>Lottery Club</td>\n",
              "      <td>686</td>\n",
              "      <td>World vision</td>\n",
              "      <td>37.460664</td>\n",
              "      <td>-3.821329</td>\n",
              "      <td>Kwa Mahundi</td>\n",
              "      <td>0</td>\n",
              "      <td>Pangani</td>\n",
              "      <td>Majengo</td>\n",
              "      <td>Manyara</td>\n",
              "      <td>21</td>\n",
              "      <td>4</td>\n",
              "      <td>Simanjiro</td>\n",
              "      <td>Ngorika</td>\n",
              "      <td>250</td>\n",
              "      <td>True</td>\n",
              "      <td>GeoData Consultants Ltd</td>\n",
              "      <td>VWC</td>\n",
              "      <td>Nyumba ya mungu pipe scheme</td>\n",
              "      <td>True</td>\n",
              "      <td>2009</td>\n",
              "      <td>gravity</td>\n",
              "      <td>gravity</td>\n",
              "      <td>gravity</td>\n",
              "      <td>vwc</td>\n",
              "      <td>user-group</td>\n",
              "      <td>pay per bucket</td>\n",
              "      <td>per bucket</td>\n",
              "      <td>soft</td>\n",
              "      <td>good</td>\n",
              "      <td>enough</td>\n",
              "      <td>enough</td>\n",
              "      <td>dam</td>\n",
              "      <td>dam</td>\n",
              "      <td>surface</td>\n",
              "      <td>communal standpipe multiple</td>\n",
              "      <td>communal standpipe</td>\n",
              "      <td>functional</td>\n",
              "      <td>2009</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>67743</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2013-01-28</td>\n",
              "      <td>Unicef</td>\n",
              "      <td>263</td>\n",
              "      <td>UNICEF</td>\n",
              "      <td>38.486161</td>\n",
              "      <td>-11.155298</td>\n",
              "      <td>Zahanati Ya Nanyumbu</td>\n",
              "      <td>0</td>\n",
              "      <td>Ruvuma / Southern Coast</td>\n",
              "      <td>Mahakamani</td>\n",
              "      <td>Mtwara</td>\n",
              "      <td>90</td>\n",
              "      <td>63</td>\n",
              "      <td>Nanyumbu</td>\n",
              "      <td>Nanyumbu</td>\n",
              "      <td>58</td>\n",
              "      <td>True</td>\n",
              "      <td>GeoData Consultants Ltd</td>\n",
              "      <td>VWC</td>\n",
              "      <td>NaN</td>\n",
              "      <td>True</td>\n",
              "      <td>1986</td>\n",
              "      <td>submersible</td>\n",
              "      <td>submersible</td>\n",
              "      <td>submersible</td>\n",
              "      <td>vwc</td>\n",
              "      <td>user-group</td>\n",
              "      <td>never pay</td>\n",
              "      <td>never pay</td>\n",
              "      <td>soft</td>\n",
              "      <td>good</td>\n",
              "      <td>dry</td>\n",
              "      <td>dry</td>\n",
              "      <td>machine dbh</td>\n",
              "      <td>borehole</td>\n",
              "      <td>groundwater</td>\n",
              "      <td>communal standpipe multiple</td>\n",
              "      <td>communal standpipe</td>\n",
              "      <td>non functional</td>\n",
              "      <td>1986</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>19728</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2011-07-13</td>\n",
              "      <td>Action In A</td>\n",
              "      <td>0</td>\n",
              "      <td>Artisan</td>\n",
              "      <td>31.130847</td>\n",
              "      <td>-1.825359</td>\n",
              "      <td>Shuleni</td>\n",
              "      <td>0</td>\n",
              "      <td>Lake Victoria</td>\n",
              "      <td>Kyanyamisa</td>\n",
              "      <td>Kagera</td>\n",
              "      <td>18</td>\n",
              "      <td>1</td>\n",
              "      <td>Karagwe</td>\n",
              "      <td>Nyakasimbi</td>\n",
              "      <td>0</td>\n",
              "      <td>True</td>\n",
              "      <td>GeoData Consultants Ltd</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>True</td>\n",
              "      <td>0</td>\n",
              "      <td>gravity</td>\n",
              "      <td>gravity</td>\n",
              "      <td>gravity</td>\n",
              "      <td>other</td>\n",
              "      <td>other</td>\n",
              "      <td>never pay</td>\n",
              "      <td>never pay</td>\n",
              "      <td>soft</td>\n",
              "      <td>good</td>\n",
              "      <td>seasonal</td>\n",
              "      <td>seasonal</td>\n",
              "      <td>rainwater harvesting</td>\n",
              "      <td>rainwater harvesting</td>\n",
              "      <td>surface</td>\n",
              "      <td>communal standpipe</td>\n",
              "      <td>communal standpipe</td>\n",
              "      <td>functional</td>\n",
              "      <td>1997</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "      id  amount_tsh  ...    status_group new_cons_year\n",
              "0  69572      6000.0  ...      functional          1999\n",
              "1   8776         0.0  ...      functional          2010\n",
              "2  34310        25.0  ...      functional          2009\n",
              "3  67743         0.0  ...  non functional          1986\n",
              "4  19728         0.0  ...      functional          1997\n",
              "\n",
              "[5 rows x 42 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 75
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vOJu7n6jHrd4",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "df.construction_year = df.construction_year.astype(np.int64)\n",
        "df.new_cons_year = df.new_cons_year.astype(np.int64)\n",
        "\n",
        "df_test.construction_year = df_test.construction_year.astype(np.int64)\n",
        "df_test.new_cons_year = df_test.new_cons_year.astype(np.int64)"
      ],
      "execution_count": 76,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ka_LmGdLPWfF",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "df['year_recorded'] = pd.DatetimeIndex(df['date_recorded']).year\n",
        "df.year_recorded = df.year_recorded.astype(np.int64)\n",
        "\n",
        "df_test['year_recorded'] = pd.DatetimeIndex(df_test['date_recorded']).year\n",
        "df_test.year_recorded = df_test.year_recorded.astype(np.int64)"
      ],
      "execution_count": 77,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "imvXzur1QVai",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "df['time_elapsed'] = (df['year_recorded']-df['new_cons_year'])\n",
        "df_test['time_elapsed'] = (df_test['year_recorded']-df_test['new_cons_year'])"
      ],
      "execution_count": 78,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "x9EKZnbMtv2B",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 408
        },
        "outputId": "6e53eab4-c721-41c5-bb43-c507a72ff46d"
      },
      "source": [
        "df.head()"
      ],
      "execution_count": 79,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>amount_tsh</th>\n",
              "      <th>date_recorded</th>\n",
              "      <th>funder</th>\n",
              "      <th>gps_height</th>\n",
              "      <th>installer</th>\n",
              "      <th>longitude</th>\n",
              "      <th>latitude</th>\n",
              "      <th>wpt_name</th>\n",
              "      <th>num_private</th>\n",
              "      <th>basin</th>\n",
              "      <th>subvillage</th>\n",
              "      <th>region</th>\n",
              "      <th>region_code</th>\n",
              "      <th>district_code</th>\n",
              "      <th>lga</th>\n",
              "      <th>ward</th>\n",
              "      <th>population</th>\n",
              "      <th>public_meeting</th>\n",
              "      <th>recorded_by</th>\n",
              "      <th>scheme_management</th>\n",
              "      <th>scheme_name</th>\n",
              "      <th>permit</th>\n",
              "      <th>construction_year</th>\n",
              "      <th>extraction_type</th>\n",
              "      <th>extraction_type_group</th>\n",
              "      <th>extraction_type_class</th>\n",
              "      <th>management</th>\n",
              "      <th>management_group</th>\n",
              "      <th>payment</th>\n",
              "      <th>payment_type</th>\n",
              "      <th>water_quality</th>\n",
              "      <th>quality_group</th>\n",
              "      <th>quantity</th>\n",
              "      <th>quantity_group</th>\n",
              "      <th>source</th>\n",
              "      <th>source_type</th>\n",
              "      <th>source_class</th>\n",
              "      <th>waterpoint_type</th>\n",
              "      <th>waterpoint_type_group</th>\n",
              "      <th>status_group</th>\n",
              "      <th>new_cons_year</th>\n",
              "      <th>year_recorded</th>\n",
              "      <th>time_elapsed</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>69572</td>\n",
              "      <td>6000.0</td>\n",
              "      <td>2011-03-14</td>\n",
              "      <td>Roman</td>\n",
              "      <td>1390</td>\n",
              "      <td>Roman</td>\n",
              "      <td>34.938093</td>\n",
              "      <td>-9.856322</td>\n",
              "      <td>none</td>\n",
              "      <td>0</td>\n",
              "      <td>Lake Nyasa</td>\n",
              "      <td>Mnyusi B</td>\n",
              "      <td>Iringa</td>\n",
              "      <td>11</td>\n",
              "      <td>5</td>\n",
              "      <td>Ludewa</td>\n",
              "      <td>Mundindi</td>\n",
              "      <td>109</td>\n",
              "      <td>True</td>\n",
              "      <td>GeoData Consultants Ltd</td>\n",
              "      <td>VWC</td>\n",
              "      <td>Roman</td>\n",
              "      <td>False</td>\n",
              "      <td>1999</td>\n",
              "      <td>gravity</td>\n",
              "      <td>gravity</td>\n",
              "      <td>gravity</td>\n",
              "      <td>vwc</td>\n",
              "      <td>user-group</td>\n",
              "      <td>pay annually</td>\n",
              "      <td>annually</td>\n",
              "      <td>soft</td>\n",
              "      <td>good</td>\n",
              "      <td>enough</td>\n",
              "      <td>enough</td>\n",
              "      <td>spring</td>\n",
              "      <td>spring</td>\n",
              "      <td>groundwater</td>\n",
              "      <td>communal standpipe</td>\n",
              "      <td>communal standpipe</td>\n",
              "      <td>functional</td>\n",
              "      <td>1999</td>\n",
              "      <td>2011</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>8776</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2013-03-06</td>\n",
              "      <td>Grumeti</td>\n",
              "      <td>1399</td>\n",
              "      <td>GRUMETI</td>\n",
              "      <td>34.698766</td>\n",
              "      <td>-2.147466</td>\n",
              "      <td>Zahanati</td>\n",
              "      <td>0</td>\n",
              "      <td>Lake Victoria</td>\n",
              "      <td>Nyamara</td>\n",
              "      <td>Mara</td>\n",
              "      <td>20</td>\n",
              "      <td>2</td>\n",
              "      <td>Serengeti</td>\n",
              "      <td>Natta</td>\n",
              "      <td>280</td>\n",
              "      <td>NaN</td>\n",
              "      <td>GeoData Consultants Ltd</td>\n",
              "      <td>Other</td>\n",
              "      <td>NaN</td>\n",
              "      <td>True</td>\n",
              "      <td>2010</td>\n",
              "      <td>gravity</td>\n",
              "      <td>gravity</td>\n",
              "      <td>gravity</td>\n",
              "      <td>wug</td>\n",
              "      <td>user-group</td>\n",
              "      <td>never pay</td>\n",
              "      <td>never pay</td>\n",
              "      <td>soft</td>\n",
              "      <td>good</td>\n",
              "      <td>insufficient</td>\n",
              "      <td>insufficient</td>\n",
              "      <td>rainwater harvesting</td>\n",
              "      <td>rainwater harvesting</td>\n",
              "      <td>surface</td>\n",
              "      <td>communal standpipe</td>\n",
              "      <td>communal standpipe</td>\n",
              "      <td>functional</td>\n",
              "      <td>2010</td>\n",
              "      <td>2013</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>34310</td>\n",
              "      <td>25.0</td>\n",
              "      <td>2013-02-25</td>\n",
              "      <td>Lottery Club</td>\n",
              "      <td>686</td>\n",
              "      <td>World vision</td>\n",
              "      <td>37.460664</td>\n",
              "      <td>-3.821329</td>\n",
              "      <td>Kwa Mahundi</td>\n",
              "      <td>0</td>\n",
              "      <td>Pangani</td>\n",
              "      <td>Majengo</td>\n",
              "      <td>Manyara</td>\n",
              "      <td>21</td>\n",
              "      <td>4</td>\n",
              "      <td>Simanjiro</td>\n",
              "      <td>Ngorika</td>\n",
              "      <td>250</td>\n",
              "      <td>True</td>\n",
              "      <td>GeoData Consultants Ltd</td>\n",
              "      <td>VWC</td>\n",
              "      <td>Nyumba ya mungu pipe scheme</td>\n",
              "      <td>True</td>\n",
              "      <td>2009</td>\n",
              "      <td>gravity</td>\n",
              "      <td>gravity</td>\n",
              "      <td>gravity</td>\n",
              "      <td>vwc</td>\n",
              "      <td>user-group</td>\n",
              "      <td>pay per bucket</td>\n",
              "      <td>per bucket</td>\n",
              "      <td>soft</td>\n",
              "      <td>good</td>\n",
              "      <td>enough</td>\n",
              "      <td>enough</td>\n",
              "      <td>dam</td>\n",
              "      <td>dam</td>\n",
              "      <td>surface</td>\n",
              "      <td>communal standpipe multiple</td>\n",
              "      <td>communal standpipe</td>\n",
              "      <td>functional</td>\n",
              "      <td>2009</td>\n",
              "      <td>2013</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>67743</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2013-01-28</td>\n",
              "      <td>Unicef</td>\n",
              "      <td>263</td>\n",
              "      <td>UNICEF</td>\n",
              "      <td>38.486161</td>\n",
              "      <td>-11.155298</td>\n",
              "      <td>Zahanati Ya Nanyumbu</td>\n",
              "      <td>0</td>\n",
              "      <td>Ruvuma / Southern Coast</td>\n",
              "      <td>Mahakamani</td>\n",
              "      <td>Mtwara</td>\n",
              "      <td>90</td>\n",
              "      <td>63</td>\n",
              "      <td>Nanyumbu</td>\n",
              "      <td>Nanyumbu</td>\n",
              "      <td>58</td>\n",
              "      <td>True</td>\n",
              "      <td>GeoData Consultants Ltd</td>\n",
              "      <td>VWC</td>\n",
              "      <td>NaN</td>\n",
              "      <td>True</td>\n",
              "      <td>1986</td>\n",
              "      <td>submersible</td>\n",
              "      <td>submersible</td>\n",
              "      <td>submersible</td>\n",
              "      <td>vwc</td>\n",
              "      <td>user-group</td>\n",
              "      <td>never pay</td>\n",
              "      <td>never pay</td>\n",
              "      <td>soft</td>\n",
              "      <td>good</td>\n",
              "      <td>dry</td>\n",
              "      <td>dry</td>\n",
              "      <td>machine dbh</td>\n",
              "      <td>borehole</td>\n",
              "      <td>groundwater</td>\n",
              "      <td>communal standpipe multiple</td>\n",
              "      <td>communal standpipe</td>\n",
              "      <td>non functional</td>\n",
              "      <td>1986</td>\n",
              "      <td>2013</td>\n",
              "      <td>27</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>19728</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2011-07-13</td>\n",
              "      <td>Action In A</td>\n",
              "      <td>0</td>\n",
              "      <td>Artisan</td>\n",
              "      <td>31.130847</td>\n",
              "      <td>-1.825359</td>\n",
              "      <td>Shuleni</td>\n",
              "      <td>0</td>\n",
              "      <td>Lake Victoria</td>\n",
              "      <td>Kyanyamisa</td>\n",
              "      <td>Kagera</td>\n",
              "      <td>18</td>\n",
              "      <td>1</td>\n",
              "      <td>Karagwe</td>\n",
              "      <td>Nyakasimbi</td>\n",
              "      <td>0</td>\n",
              "      <td>True</td>\n",
              "      <td>GeoData Consultants Ltd</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>True</td>\n",
              "      <td>0</td>\n",
              "      <td>gravity</td>\n",
              "      <td>gravity</td>\n",
              "      <td>gravity</td>\n",
              "      <td>other</td>\n",
              "      <td>other</td>\n",
              "      <td>never pay</td>\n",
              "      <td>never pay</td>\n",
              "      <td>soft</td>\n",
              "      <td>good</td>\n",
              "      <td>seasonal</td>\n",
              "      <td>seasonal</td>\n",
              "      <td>rainwater harvesting</td>\n",
              "      <td>rainwater harvesting</td>\n",
              "      <td>surface</td>\n",
              "      <td>communal standpipe</td>\n",
              "      <td>communal standpipe</td>\n",
              "      <td>functional</td>\n",
              "      <td>1997</td>\n",
              "      <td>2011</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "      id  amount_tsh date_recorded  ... new_cons_year  year_recorded time_elapsed\n",
              "0  69572      6000.0    2011-03-14  ...          1999           2011           12\n",
              "1   8776         0.0    2013-03-06  ...          2010           2013            3\n",
              "2  34310        25.0    2013-02-25  ...          2009           2013            4\n",
              "3  67743         0.0    2013-01-28  ...          1986           2013           27\n",
              "4  19728         0.0    2011-07-13  ...          1997           2011           14\n",
              "\n",
              "[5 rows x 44 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 79
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PEVsqjvT9p_-",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 817
        },
        "outputId": "5b6fff75-887a-4062-db82-2dcbbf68eb41"
      },
      "source": [
        "df = df.drop('scheme_name', axis=1)\n",
        "df_test = df_test.drop('scheme_name', axis=1)\n",
        "\n",
        "df.isnull().sum()"
      ],
      "execution_count": 80,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "id                          0\n",
              "amount_tsh                  0\n",
              "date_recorded               0\n",
              "funder                   3635\n",
              "gps_height                  0\n",
              "installer                3655\n",
              "longitude                   0\n",
              "latitude                    0\n",
              "wpt_name                    0\n",
              "num_private                 0\n",
              "basin                       0\n",
              "subvillage                371\n",
              "region                      0\n",
              "region_code                 0\n",
              "district_code               0\n",
              "lga                         0\n",
              "ward                        0\n",
              "population                  0\n",
              "public_meeting           3334\n",
              "recorded_by                 0\n",
              "scheme_management        3877\n",
              "permit                   3056\n",
              "construction_year           0\n",
              "extraction_type             0\n",
              "extraction_type_group       0\n",
              "extraction_type_class       0\n",
              "management                  0\n",
              "management_group            0\n",
              "payment                     0\n",
              "payment_type                0\n",
              "water_quality               0\n",
              "quality_group               0\n",
              "quantity                    0\n",
              "quantity_group              0\n",
              "source                      0\n",
              "source_type                 0\n",
              "source_class                0\n",
              "waterpoint_type             0\n",
              "waterpoint_type_group       0\n",
              "status_group                0\n",
              "new_cons_year               0\n",
              "year_recorded               0\n",
              "time_elapsed                0\n",
              "dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 80
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Cxll6ZzgAGAj",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "d9f93b15-f23a-461c-b9f8-ed6817c5a010"
      },
      "source": [
        "df.shape"
      ],
      "execution_count": 81,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(59400, 43)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 81
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "eI9OX0M1AHGC",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "df1 = df.dropna(axis=0, subset=['funder','installer','subvillage','public_meeting','scheme_management','permit'])"
      ],
      "execution_count": 82,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_QNzOWe7AWE_",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 817
        },
        "outputId": "c2137b5a-7523-4fd4-93f5-53425ca5c1f7"
      },
      "source": [
        "df1.isnull().sum()"
      ],
      "execution_count": 83,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "id                       0\n",
              "amount_tsh               0\n",
              "date_recorded            0\n",
              "funder                   0\n",
              "gps_height               0\n",
              "installer                0\n",
              "longitude                0\n",
              "latitude                 0\n",
              "wpt_name                 0\n",
              "num_private              0\n",
              "basin                    0\n",
              "subvillage               0\n",
              "region                   0\n",
              "region_code              0\n",
              "district_code            0\n",
              "lga                      0\n",
              "ward                     0\n",
              "population               0\n",
              "public_meeting           0\n",
              "recorded_by              0\n",
              "scheme_management        0\n",
              "permit                   0\n",
              "construction_year        0\n",
              "extraction_type          0\n",
              "extraction_type_group    0\n",
              "extraction_type_class    0\n",
              "management               0\n",
              "management_group         0\n",
              "payment                  0\n",
              "payment_type             0\n",
              "water_quality            0\n",
              "quality_group            0\n",
              "quantity                 0\n",
              "quantity_group           0\n",
              "source                   0\n",
              "source_type              0\n",
              "source_class             0\n",
              "waterpoint_type          0\n",
              "waterpoint_type_group    0\n",
              "status_group             0\n",
              "new_cons_year            0\n",
              "year_recorded            0\n",
              "time_elapsed             0\n",
              "dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 83
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yOvtBlwuBy2p",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "9006ad84-f2c0-4c6a-d1fb-ee992ae019d9"
      },
      "source": [
        "df1.shape"
      ],
      "execution_count": 84,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(48288, 43)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 84
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MzLO7dpjkbJK",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 817
        },
        "outputId": "f34f0ae9-f01f-4d19-cf12-aac88eef96ca"
      },
      "source": [
        "df1.dtypes"
      ],
      "execution_count": 85,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "id                                int64\n",
              "amount_tsh                      float64\n",
              "date_recorded            datetime64[ns]\n",
              "funder                           object\n",
              "gps_height                        int64\n",
              "installer                        object\n",
              "longitude                       float64\n",
              "latitude                        float64\n",
              "wpt_name                         object\n",
              "num_private                       int64\n",
              "basin                            object\n",
              "subvillage                       object\n",
              "region                           object\n",
              "region_code                       int64\n",
              "district_code                     int64\n",
              "lga                              object\n",
              "ward                             object\n",
              "population                        int64\n",
              "public_meeting                   object\n",
              "recorded_by                      object\n",
              "scheme_management                object\n",
              "permit                           object\n",
              "construction_year                 int64\n",
              "extraction_type                  object\n",
              "extraction_type_group            object\n",
              "extraction_type_class            object\n",
              "management                       object\n",
              "management_group                 object\n",
              "payment                          object\n",
              "payment_type                     object\n",
              "water_quality                    object\n",
              "quality_group                    object\n",
              "quantity                         object\n",
              "quantity_group                   object\n",
              "source                           object\n",
              "source_type                      object\n",
              "source_class                     object\n",
              "waterpoint_type                  object\n",
              "waterpoint_type_group            object\n",
              "status_group                     object\n",
              "new_cons_year                     int64\n",
              "year_recorded                     int64\n",
              "time_elapsed                      int64\n",
              "dtype: object"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 85
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZFQ4ntoaeJ-3",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#Dropping redundant columns and columns without relevant value\n",
        "\n",
        "df1 = df1.drop(['date_recorded','wpt_name','num_private','region','funder',\n",
        "          'lga','ward','recorded_by','construction_year','installer',\n",
        "          'extraction_type_class','extraction_type_group','management',\n",
        "          'payment','water_quality','quantity','source',\n",
        "          'subvillage','waterpoint_type_group'], axis=1)\n",
        "\n",
        "df_test = df_test.drop(['date_recorded','wpt_name','num_private','region','funder',\n",
        "          'lga','ward','recorded_by','construction_year','installer',\n",
        "          'extraction_type_class','extraction_type_group','management',\n",
        "          'payment','water_quality','quantity','source',\n",
        "          'subvillage','waterpoint_type_group'], axis=1)"
      ],
      "execution_count": 86,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MuPNY8tJn5G1",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 290
        },
        "outputId": "4da9525f-5a91-4bcd-b544-7b61a8d11a49"
      },
      "source": [
        "df1.status_group[df1.status_group == 'functional'] = 1\n",
        "df1.status_group[df1.status_group == 'non functional'] = 2\n",
        "df1.status_group[df1.status_group == 'functional needs repair'] = 3"
      ],
      "execution_count": 87,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \"\"\"Entry point for launching an IPython kernel.\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:3: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  This is separate from the ipykernel package so we can avoid doing imports until\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nHnhsq08MBTJ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 90
        },
        "outputId": "3935743e-8d2c-489f-f6ad-a32b71bee602"
      },
      "source": [
        "df1['status_group'].value_counts()"
      ],
      "execution_count": 88,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1    26517\n",
              "2    18273\n",
              "3     3498\n",
              "Name: status_group, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 88
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OWi4TfS3PnnD",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 145
        },
        "outputId": "b993ba52-e1a9-4c19-a64d-1a8b06b8fb06"
      },
      "source": [
        "df1['quality_group'].value_counts()"
      ],
      "execution_count": 89,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "good        42667\n",
              "salty        3949\n",
              "unknown       880\n",
              "colored       320\n",
              "milky         299\n",
              "fluoride      173\n",
              "Name: quality_group, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 89
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DJFMT53oPhak",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "51fe8972-90f1-4a39-e1ed-d35075617b2d"
      },
      "source": [
        "df1.quality_group[df1.quality_group == 'good'] = 1\n",
        "df1.quality_group[df1.quality_group == 'salty'] = 2\n",
        "df1.quality_group[df1.quality_group == 'unknown'] = 3\n",
        "df1.quality_group[df1.quality_group == 'colored'] = 4\n",
        "df1.quality_group[df1.quality_group == 'milky'] = 5\n",
        "df1.quality_group[df1.quality_group == 'fluoride'] = 6\n",
        "\n",
        "df1.quality_group = df1.quality_group.astype(np.int64)\n",
        "\n",
        "df_test.quality_group[df_test.quality_group == 'good'] = 1\n",
        "df_test.quality_group[df_test.quality_group == 'salty'] = 2\n",
        "df_test.quality_group[df_test.quality_group == 'unknown'] = 3\n",
        "df_test.quality_group[df_test.quality_group == 'colored'] = 4\n",
        "df_test.quality_group[df_test.quality_group == 'milky'] = 5\n",
        "df_test.quality_group[df_test.quality_group == 'fluoride'] = 6\n",
        "\n",
        "df_test.quality_group = df_test.quality_group.astype(np.int64)"
      ],
      "execution_count": 90,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \"\"\"Entry point for launching an IPython kernel.\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:3: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  This is separate from the ipykernel package so we can avoid doing imports until\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  after removing the cwd from sys.path.\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \"\"\"\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:10: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  # Remove the CWD from sys.path while we load stuff.\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  # This is added back by InteractiveShellApp.init_path()\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:12: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  if sys.path[0] == '':\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:13: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  del sys.path[0]\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:14: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:15: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  from ipykernel import kernelapp as app\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QJCQoS-bSOX8",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 163
        },
        "outputId": "e97fea86-bfee-48ae-9835-082e03ea4cf1"
      },
      "source": [
        "df1['waterpoint_type'].value_counts()"
      ],
      "execution_count": 91,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "communal standpipe             23837\n",
              "hand pump                      13602\n",
              "communal standpipe multiple     5459\n",
              "other                           4651\n",
              "improved spring                  651\n",
              "cattle trough                     82\n",
              "dam                                6\n",
              "Name: waterpoint_type, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 91
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "F3VYY8XcSVh9",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "e8982372-8e8f-4a42-8a0e-94ae74c88090"
      },
      "source": [
        "df1.waterpoint_type[df1.waterpoint_type == 'communal standpipe'] = 1\n",
        "df1.waterpoint_type[df1.waterpoint_type == 'hand pump'] = 2\n",
        "df1.waterpoint_type[df1.waterpoint_type == 'communal standpipe multiple'] = 3\n",
        "df1.waterpoint_type[df1.waterpoint_type == 'other'] = 4\n",
        "df1.waterpoint_type[df1.waterpoint_type == 'improved spring'] = 5\n",
        "df1.waterpoint_type[df1.waterpoint_type == 'cattle trough'] = 6\n",
        "df1.waterpoint_type[df1.waterpoint_type == 'dam'] = 7\n",
        "\n",
        "df1.waterpoint_type = df1.waterpoint_type.astype(np.int64)\n",
        "\n",
        "df_test.waterpoint_type[df_test.waterpoint_type == 'communal standpipe'] = 1\n",
        "df_test.waterpoint_type[df_test.waterpoint_type == 'hand pump'] = 2\n",
        "df_test.waterpoint_type[df_test.waterpoint_type == 'communal standpipe multiple'] = 3\n",
        "df_test.waterpoint_type[df_test.waterpoint_type == 'other'] = 4\n",
        "df_test.waterpoint_type[df_test.waterpoint_type == 'improved spring'] = 5\n",
        "df_test.waterpoint_type[df_test.waterpoint_type == 'cattle trough'] = 6\n",
        "df_test.waterpoint_type[df_test.waterpoint_type == 'dam'] = 7\n",
        "\n",
        "df_test.waterpoint_type = df1.waterpoint_type.astype(np.int64)"
      ],
      "execution_count": 92,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \"\"\"Entry point for launching an IPython kernel.\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:3: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  This is separate from the ipykernel package so we can avoid doing imports until\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  after removing the cwd from sys.path.\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \"\"\"\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:7: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  import sys\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  # This is added back by InteractiveShellApp.init_path()\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:12: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  if sys.path[0] == '':\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:13: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  del sys.path[0]\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:14: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:15: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  from ipykernel import kernelapp as app\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:16: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  app.launch_new_instance()\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:17: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_pdyTR40iDbC",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 199
        },
        "outputId": "386a9f41-4a1f-45db-cea6-37d47f3d2267"
      },
      "source": [
        "df1['basin'].value_counts()"
      ],
      "execution_count": 93,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Pangani                    8540\n",
              "Lake Victoria              7319\n",
              "Internal                   6155\n",
              "Rufiji                     6031\n",
              "Lake Tanganyika            5663\n",
              "Wami / Ruvu                5127\n",
              "Ruvuma / Southern Coast    3675\n",
              "Lake Nyasa                 3376\n",
              "Lake Rukwa                 2402\n",
              "Name: basin, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 93
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3fI2mziniF93",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "3e02d916-44b2-4a99-ac99-47d9cb57e463"
      },
      "source": [
        "df1.basin[df1.basin == 'Pangani'] = 1\n",
        "df1.basin[df1.basin == 'Lake Victoria'] = 2\n",
        "df1.basin[df1.basin == 'Internal'] = 3\n",
        "df1.basin[df1.basin == 'Rufiji'] = 4\n",
        "df1.basin[df1.basin =='Lake Tanganyika'] = 5\n",
        "df1.basin[df1.basin == 'Wami / Ruvu'] = 6\n",
        "df1.basin[df1.basin =='Ruvuma / Southern Coast'] = 7\n",
        "df1.basin[df1.basin == 'Lake Nyasa'] = 8\n",
        "df1.basin[df1.basin =='Lake Rukwa'] = 9\n",
        "\n",
        "df1.basin = df1.basin.astype(np.int64)\n",
        "\n",
        "df_test.basin[df_test.basin == 'Pangani'] = 1\n",
        "df_test.basin[df_test.basin == 'Lake Victoria'] = 2\n",
        "df_test.basin[df_test.basin == 'Internal'] = 3\n",
        "df_test.basin[df_test.basin == 'Rufiji'] = 4\n",
        "df_test.basin[df_test.basin =='Lake Tanganyika'] = 5\n",
        "df_test.basin[df_test.basin == 'Wami / Ruvu'] = 6\n",
        "df_test.basin[df_test.basin =='Ruvuma / Southern Coast'] = 7\n",
        "df_test.basin[df_test.basin == 'Lake Nyasa'] = 8\n",
        "df_test.basin[df_test.basin =='Lake Rukwa'] = 9\n",
        "\n",
        "df_test.basin = df_test.basin.astype(np.int64)"
      ],
      "execution_count": 94,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \"\"\"Entry point for launching an IPython kernel.\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:3: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  This is separate from the ipykernel package so we can avoid doing imports until\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  after removing the cwd from sys.path.\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \"\"\"\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:7: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  import sys\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:8: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:9: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  if __name__ == '__main__':\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:13: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  del sys.path[0]\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:14: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:15: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  from ipykernel import kernelapp as app\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:16: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  app.launch_new_instance()\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:17: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:18: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:19: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:20: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:21: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "C308bPZUjKCg",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 72
        },
        "outputId": "0d0146b6-8a47-4e79-c1e5-06798c82e4d6"
      },
      "source": [
        "df1['public_meeting'].value_counts()"
      ],
      "execution_count": 95,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True     43940\n",
              "False     4348\n",
              "Name: public_meeting, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 95
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6UBSW8UwjYHA",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 381
        },
        "outputId": "d56149df-7ee8-4751-996f-14fea924223a"
      },
      "source": [
        "df1.public_meeting[df1.public_meeting == 'True'] = 1\n",
        "df1.public_meeting[df1.public_meeting == 'False'] = 2\n",
        "\n",
        "df1.public_meeting = df1.public_meeting.astype(np.int64)\n",
        "\n",
        "df_test.public_meeting[df_test.public_meeting == 'True'] = 1\n",
        "df_test.public_meeting[df_test.public_meeting == 'False'] = 2\n"
      ],
      "execution_count": 96,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \"\"\"Entry point for launching an IPython kernel.\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:7: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  import sys\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "O-x6X8LUjkNa",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 72
        },
        "outputId": "4e073677-b479-41c5-d095-f09188a86c27"
      },
      "source": [
        "df1['permit'].value_counts()"
      ],
      "execution_count": 97,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True     33260\n",
              "False    15028\n",
              "Name: permit, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 97
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "p75FxvWGjpIl",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 381
        },
        "outputId": "900c4451-81c4-40b5-925d-1c8f07a87d11"
      },
      "source": [
        "df1.permit[df1.permit == 'True'] = 1\n",
        "df1.permit[df1.permit == 'False'] = 2\n",
        "\n",
        "df1.permit = df1.permit.astype(np.int64)\n",
        "\n",
        "df_test.permit[df_test.permit == 'True'] = 1\n",
        "df_test.permit[df_test.permit == 'False'] = 2"
      ],
      "execution_count": 98,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \"\"\"Entry point for launching an IPython kernel.\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:7: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  import sys\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "eqYBN-1Yj1c2",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "outputId": "7a73b206-0659-458b-8ecd-24e2d9b6da3c"
      },
      "source": [
        "df1['extraction_type'].value_counts()"
      ],
      "execution_count": 99,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "gravity                      23036\n",
              "nira/tanira                   6260\n",
              "other                         4538\n",
              "submersible                   3645\n",
              "swn 80                        2858\n",
              "mono                          2382\n",
              "india mark ii                 2047\n",
              "afridev                       1346\n",
              "ksb                           1330\n",
              "other - rope pump              212\n",
              "other - swn 81                 199\n",
              "windmill                       104\n",
              "cemo                            89\n",
              "india mark iii                  87\n",
              "other - play pump               76\n",
              "walimi                          46\n",
              "climax                          32\n",
              "other - mkulima/shinyanga        1\n",
              "Name: extraction_type, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 99
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "eWQBqgBVkBnq",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "2c1bfd9d-7aa0-487d-d9cc-c357b20cbb37"
      },
      "source": [
        "df1.extraction_type[df1.extraction_type == 'gravity'] = 1\n",
        "df1.extraction_type[df1.extraction_type == 'nira/tanira'] = 2\n",
        "df1.extraction_type[df1.extraction_type == 'other'] = 3\n",
        "df1.extraction_type[df1.extraction_type == 'submersible'] = 4\n",
        "df1.extraction_type[df1.extraction_type =='swn 80'] = 5\n",
        "df1.extraction_type[df1.extraction_type == 'mono'] = 6\n",
        "df1.extraction_type[df1.extraction_type =='india mark ii'] = 7\n",
        "df1.extraction_type[df1.extraction_type == 'afridev'] = 8\n",
        "df1.extraction_type[df1.extraction_type =='ksb'] = 9\n",
        "df1.extraction_type[df1.extraction_type == 'other - rope pump'] = 10\n",
        "df1.extraction_type[df1.extraction_type == 'other - swn 81'] = 11\n",
        "df1.extraction_type[df1.extraction_type == 'windmill'] = 12\n",
        "df1.extraction_type[df1.extraction_type == 'cemo'] = 13\n",
        "df1.extraction_type[df1.extraction_type =='india mark iii'] = 14\n",
        "df1.extraction_type[df1.extraction_type == 'other - play pump'] = 15\n",
        "df1.extraction_type[df1.extraction_type =='walimi'] = 16\n",
        "df1.extraction_type[df1.extraction_type == 'climax'] = 17\n",
        "df1.extraction_type[df1.extraction_type =='other - mkulima/shinyanga'] = 18\n",
        "\n",
        "df1.extraction_type = df1.extraction_type.astype(np.int64)\n",
        "\n",
        "df_test.extraction_type[df_test.extraction_type == 'gravity'] = 1\n",
        "df_test.extraction_type[df_test.extraction_type == 'nira/tanira'] = 2\n",
        "df_test.extraction_type[df_test.extraction_type == 'other'] = 3\n",
        "df_test.extraction_type[df_test.extraction_type == 'submersible'] = 4\n",
        "df_test.extraction_type[df_test.extraction_type =='swn 80'] = 5\n",
        "df_test.extraction_type[df_test.extraction_type == 'mono'] = 6\n",
        "df_test.extraction_type[df_test.extraction_type =='india mark ii'] = 7\n",
        "df_test.extraction_type[df_test.extraction_type == 'afridev'] = 8\n",
        "df_test.extraction_type[df_test.extraction_type =='ksb'] = 9\n",
        "df_test.extraction_type[df_test.extraction_type == 'other - rope pump'] = 10\n",
        "df_test.extraction_type[df_test.extraction_type == 'other - swn 81'] = 11\n",
        "df_test.extraction_type[df_test.extraction_type == 'windmill'] = 12\n",
        "df_test.extraction_type[df_test.extraction_type == 'cemo'] = 13\n",
        "df_test.extraction_type[df_test.extraction_type =='india mark iii'] = 14\n",
        "df_test.extraction_type[df_test.extraction_type == 'other - play pump'] = 15\n",
        "df_test.extraction_type[df_test.extraction_type =='walimi'] = 16\n",
        "df_test.extraction_type[df_test.extraction_type == 'climax'] = 17\n",
        "df_test.extraction_type[df_test.extraction_type =='other - mkulima/shinyanga'] = 18\n",
        "\n",
        "df_test.extraction_type = df_test.extraction_type.astype(np.int64)\n"
      ],
      "execution_count": 100,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \"\"\"Entry point for launching an IPython kernel.\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:3: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  This is separate from the ipykernel package so we can avoid doing imports until\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  after removing the cwd from sys.path.\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \"\"\"\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:7: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  import sys\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:8: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:9: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  if __name__ == '__main__':\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:10: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  # Remove the CWD from sys.path while we load stuff.\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  # This is added back by InteractiveShellApp.init_path()\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:12: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  if sys.path[0] == '':\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:13: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  del sys.path[0]\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:14: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:15: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  from ipykernel import kernelapp as app\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:16: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  app.launch_new_instance()\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:17: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:18: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:22: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:23: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:24: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:25: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:26: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:27: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:28: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:29: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:30: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:31: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:32: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:33: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:34: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:35: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:36: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:37: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:38: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:39: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "S3pIh3nYl-Cj",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 126
        },
        "outputId": "97671bc3-62de-463c-ac5f-8f8b463a2c06"
      },
      "source": [
        "df1['management_group'].value_counts()"
      ],
      "execution_count": 101,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "user-group    43337\n",
              "commercial     2998\n",
              "parastatal     1331\n",
              "other           548\n",
              "unknown          74\n",
              "Name: management_group, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 101
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pjzdmc8JmQXX",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 926
        },
        "outputId": "a1b18b0c-e665-42b5-86a1-3d8989aab17d"
      },
      "source": [
        "df1.management_group[df1.management_group == 'user-group'] = 1\n",
        "df1.management_group[df1.management_group == 'commercial'] = 2\n",
        "df1.management_group[df1.management_group == 'parastatal'] = 3\n",
        "df1.management_group[df1.management_group == 'other'] = 4\n",
        "df1.management_group[df1.management_group == 'unknown'] = 5\n",
        "\n",
        "df1.management_group = df1.management_group.astype(np.int64)\n",
        "\n",
        "df_test.management_group[df_test.management_group == 'user-group'] = 1\n",
        "df_test.management_group[df_test.management_group == 'commercial'] = 2\n",
        "df_test.management_group[df_test.management_group == 'parastatal'] = 3\n",
        "df_test.management_group[df_test.management_group == 'other'] = 4\n",
        "df_test.management_group[df_test.management_group == 'unknown'] = 5\n",
        "\n",
        "df_test.management_group = df_test.management_group.astype(np.int64)"
      ],
      "execution_count": 102,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \"\"\"Entry point for launching an IPython kernel.\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:3: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  This is separate from the ipykernel package so we can avoid doing imports until\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  after removing the cwd from sys.path.\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \"\"\"\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:9: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  if __name__ == '__main__':\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:10: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  # Remove the CWD from sys.path while we load stuff.\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  # This is added back by InteractiveShellApp.init_path()\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:12: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  if sys.path[0] == '':\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:13: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  del sys.path[0]\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "s-c_YL6SmyMM",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 163
        },
        "outputId": "0b8bd541-dc46-42e1-a92e-ddda8248d6bd"
      },
      "source": [
        "df1['payment_type'].value_counts()"
      ],
      "execution_count": 103,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "never pay     20690\n",
              "per bucket     7897\n",
              "monthly        7542\n",
              "unknown        4172\n",
              "on failure     3642\n",
              "annually       3417\n",
              "other           928\n",
              "Name: payment_type, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 103
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zqPZn8tjm-W0",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "a9513ea6-3697-43d2-acf0-9d839b281161"
      },
      "source": [
        "df1.payment_type[df1.payment_type == 'never pay'] = 1\n",
        "df1.payment_type[df1.payment_type == 'per bucket'] = 2\n",
        "df1.payment_type[df1.payment_type == 'monthly'] = 3\n",
        "df1.payment_type[df1.payment_type == 'unknown'] = 4\n",
        "df1.payment_type[df1.payment_type == 'on failure'] = 5\n",
        "df1.payment_type[df1.payment_type == 'annually'] = 6\n",
        "df1.payment_type[df1.payment_type == 'other'] = 7\n",
        "\n",
        "df1.payment_type = df1.payment_type.astype(np.int64)\n",
        "\n",
        "df_test.payment_type[df_test.payment_type == 'never pay'] = 1\n",
        "df_test.payment_type[df_test.payment_type == 'per bucket'] = 2\n",
        "df_test.payment_type[df_test.payment_type == 'monthly'] = 3\n",
        "df_test.payment_type[df_test.payment_type == 'unknown'] = 4\n",
        "df_test.payment_type[df_test.payment_type == 'on failure'] = 5\n",
        "df_test.payment_type[df_test.payment_type == 'annually'] = 6\n",
        "df_test.payment_type[df_test.payment_type == 'other'] = 7\n",
        "\n",
        "df_test.payment_type = df_test.payment_type.astype(np.int64)"
      ],
      "execution_count": 104,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \"\"\"Entry point for launching an IPython kernel.\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:3: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  This is separate from the ipykernel package so we can avoid doing imports until\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  after removing the cwd from sys.path.\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \"\"\"\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:7: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  import sys\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  # This is added back by InteractiveShellApp.init_path()\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:12: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  if sys.path[0] == '':\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:13: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  del sys.path[0]\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:14: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:15: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  from ipykernel import kernelapp as app\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:16: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  app.launch_new_instance()\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:17: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Zi5Eu6s6np7l",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 126
        },
        "outputId": "43a7c79f-bced-4060-951f-0420d9f4e0a5"
      },
      "source": [
        "df1['quantity_group'].value_counts()"
      ],
      "execution_count": 105,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "enough          28355\n",
              "insufficient    11799\n",
              "dry              4945\n",
              "seasonal         2899\n",
              "unknown           290\n",
              "Name: quantity_group, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 105
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "17Ew76LkoF-l",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 926
        },
        "outputId": "17f73209-b11b-4935-b133-b314d1ed2048"
      },
      "source": [
        "df1.quantity_group[df1.quantity_group == 'enough'] = 1\n",
        "df1.quantity_group[df1.quantity_group == 'insufficient'] = 2\n",
        "df1.quantity_group[df1.quantity_group == 'dry'] = 3\n",
        "df1.quantity_group[df1.quantity_group == 'seasonal'] = 4\n",
        "df1.quantity_group[df1.quantity_group == 'unknown'] = 5\n",
        "\n",
        "df1.quantity_group = df1.quantity_group.astype(np.int64)\n",
        "\n",
        "df_test.quantity_group[df_test.quantity_group == 'enough'] = 1\n",
        "df_test.quantity_group[df_test.quantity_group == 'insufficient'] = 2\n",
        "df_test.quantity_group[df_test.quantity_group == 'dry'] = 3\n",
        "df_test.quantity_group[df_test.quantity_group == 'seasonal'] = 4\n",
        "df_test.quantity_group[df_test.quantity_group == 'unknown'] = 5\n",
        "\n",
        "df_test.quantity_group = df_test.quantity_group.astype(np.int64)"
      ],
      "execution_count": 106,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \"\"\"Entry point for launching an IPython kernel.\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:3: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  This is separate from the ipykernel package so we can avoid doing imports until\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  after removing the cwd from sys.path.\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \"\"\"\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:9: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  if __name__ == '__main__':\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:10: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  # Remove the CWD from sys.path while we load stuff.\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  # This is added back by InteractiveShellApp.init_path()\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:12: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  if sys.path[0] == '':\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:13: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  del sys.path[0]\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bCb9spvCpfWI",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 163
        },
        "outputId": "bab1544c-a3cf-4c30-a3c1-3b6e0e7a5da2"
      },
      "source": [
        "df1['source_type'].value_counts()"
      ],
      "execution_count": 107,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "spring                  14852\n",
              "shallow well            12415\n",
              "borehole                 9509\n",
              "river/lake               9110\n",
              "rainwater harvesting     1607\n",
              "dam                       581\n",
              "other                     214\n",
              "Name: source_type, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 107
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "d01ENoM7p1DC",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "cb601ac4-2ec2-4442-c8c4-4c579afeb9e3"
      },
      "source": [
        "df1.source_type[df1.source_type == 'spring'] = 1\n",
        "df1.source_type[df1.source_type == 'shallow well'] = 2\n",
        "df1.source_type[df1.source_type == 'borehole'] = 3\n",
        "df1.source_type[df1.source_type == 'river/lake'] = 4\n",
        "df1.source_type[df1.source_type == 'rainwater harvesting'] = 5\n",
        "df1.source_type[df1.source_type == 'dam'] = 6\n",
        "df1.source_type[df1.source_type == 'other'] = 7\n",
        "\n",
        "df1.source_type = df1.source_type.astype(np.int64)\n",
        "\n",
        "df_test.source_type[df_test.source_type == 'spring'] = 1\n",
        "df_test.source_type[df_test.source_type == 'shallow well'] = 2\n",
        "df_test.source_type[df_test.source_type == 'borehole'] = 3\n",
        "df_test.source_type[df_test.source_type == 'river/lake'] = 4\n",
        "df_test.source_type[df_test.source_type == 'rainwater harvesting'] = 5\n",
        "df_test.source_type[df_test.source_type == 'dam'] = 6\n",
        "df_test.source_type[df_test.source_type == 'other'] = 7\n",
        "\n",
        "df_test.source_type = df_test.source_type.astype(np.int64)"
      ],
      "execution_count": 108,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \"\"\"Entry point for launching an IPython kernel.\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:3: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  This is separate from the ipykernel package so we can avoid doing imports until\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  after removing the cwd from sys.path.\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \"\"\"\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:7: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  import sys\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  # This is added back by InteractiveShellApp.init_path()\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:12: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  if sys.path[0] == '':\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:13: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  del sys.path[0]\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:14: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:15: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  from ipykernel import kernelapp as app\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:16: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  app.launch_new_instance()\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:17: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sKGe9IG6qQJa",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 90
        },
        "outputId": "63603363-5b06-4f40-92a0-fbae6354fb1f"
      },
      "source": [
        "df1['source_class'].value_counts()"
      ],
      "execution_count": 109,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "groundwater    36776\n",
              "surface        11298\n",
              "unknown          214\n",
              "Name: source_class, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 109
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BOGONuVoqYlb",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 563
        },
        "outputId": "2e82951c-ed88-495f-f82c-6e7ab9256992"
      },
      "source": [
        "df1.source_class[df1.source_class == 'groundwater'] = 1\n",
        "df1.source_class[df1.source_class == 'surface'] = 2\n",
        "df1.source_class[df1.source_class == 'unknown'] = 3\n",
        "\n",
        "df1.source_class = df1.source_class.astype(np.int64)\n",
        "\n",
        "df_test.source_class[df_test.source_class == 'groundwater'] = 1\n",
        "df_test.source_class[df_test.source_class == 'surface'] = 2\n",
        "df_test.source_class[df_test.source_class == 'unknown'] = 3\n",
        "\n",
        "df_test.source_class = df_test.source_class.astype(np.int64)"
      ],
      "execution_count": 110,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \"\"\"Entry point for launching an IPython kernel.\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:3: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  This is separate from the ipykernel package so we can avoid doing imports until\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:7: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  import sys\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:8: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:9: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  if __name__ == '__main__':\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7oGn8znBCEAZ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 254
        },
        "outputId": "5ae77976-0e2a-4a25-949d-ea721a9d22b7"
      },
      "source": [
        "df1['scheme_management'].value_counts()"
      ],
      "execution_count": 111,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "VWC                 32344\n",
              "WUG                  4237\n",
              "Water authority      2913\n",
              "WUA                  2634\n",
              "Water Board          2488\n",
              "Parastatal           1294\n",
              "Company              1028\n",
              "Private operator      805\n",
              "Other                 376\n",
              "SWC                    97\n",
              "Trust                  71\n",
              "None                    1\n",
              "Name: scheme_management, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 111
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PJwu9JzpCKB9",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "08901fbd-a6f1-4667-c558-86912aa98540"
      },
      "source": [
        "df1.scheme_management[df1.scheme_management == 'VWC'] = 1\n",
        "df1.scheme_management[df1.scheme_management == 'WUG'] = 2\n",
        "df1.scheme_management[df1.scheme_management == 'Water authority'] = 3\n",
        "df1.scheme_management[df1.scheme_management == 'WUA'] = 4\n",
        "df1.scheme_management[df1.scheme_management == 'Water Board'] = 5\n",
        "df1.scheme_management[df1.scheme_management == 'Parastatal'] = 6\n",
        "df1.scheme_management[df1.scheme_management == 'Company'] = 7\n",
        "df1.scheme_management[df1.scheme_management == 'Private operator'] = 8\n",
        "df1.scheme_management[df1.scheme_management == 'Other'] = 9\n",
        "df1.scheme_management[df1.scheme_management == 'SWC'] = 10\n",
        "df1.scheme_management[df1.scheme_management == 'Trust'] = 11\n",
        "df1.scheme_management[df1.scheme_management == 'None'] = 12\n",
        "\n",
        "df1.scheme_management = df1.scheme_management.astype(np.int64)\n",
        "\n",
        "df_test.scheme_management[df_test.scheme_management == 'VWC'] = 1\n",
        "df_test.scheme_management[df_test.scheme_management == 'WUG'] = 2\n",
        "df_test.scheme_management[df_test.scheme_management == 'Water authority'] = 3\n",
        "df_test.scheme_management[df_test.scheme_management == 'WUA'] = 4\n",
        "df_test.scheme_management[df_test.scheme_management == 'Water Board'] = 5\n",
        "df_test.scheme_management[df_test.scheme_management == 'Parastatal'] = 6\n",
        "df_test.scheme_management[df_test.scheme_management == 'Company'] = 7\n",
        "df_test.scheme_management[df_test.scheme_management == 'Private operator'] = 8\n",
        "df_test.scheme_management[df_test.scheme_management == 'Other'] = 9\n",
        "df_test.scheme_management[df_test.scheme_management == 'SWC'] = 10\n",
        "df_test.scheme_management[df_test.scheme_management == 'Trust'] = 11\n",
        "df_test.scheme_management[df_test.scheme_management == 'None'] = 12\n"
      ],
      "execution_count": 112,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \"\"\"Entry point for launching an IPython kernel.\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:3: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  This is separate from the ipykernel package so we can avoid doing imports until\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  after removing the cwd from sys.path.\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \"\"\"\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:7: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  import sys\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:8: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:9: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  if __name__ == '__main__':\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:10: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  # Remove the CWD from sys.path while we load stuff.\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  # This is added back by InteractiveShellApp.init_path()\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:12: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  if sys.path[0] == '':\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:16: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  app.launch_new_instance()\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:17: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:18: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:19: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:20: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:21: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:22: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:23: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:24: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:25: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:26: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:27: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Bk3QnOFyBuhz",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "df1.status_group = df1.status_group.astype(np.int64)"
      ],
      "execution_count": 113,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VChUJDHdMMty",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "outputId": "f843331c-8d3b-45ff-d212-8148a70e77a4"
      },
      "source": [
        "df1.dtypes"
      ],
      "execution_count": 114,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "id                     int64\n",
              "amount_tsh           float64\n",
              "gps_height             int64\n",
              "longitude            float64\n",
              "latitude             float64\n",
              "basin                  int64\n",
              "region_code            int64\n",
              "district_code          int64\n",
              "population             int64\n",
              "public_meeting         int64\n",
              "scheme_management      int64\n",
              "permit                 int64\n",
              "extraction_type        int64\n",
              "management_group       int64\n",
              "payment_type           int64\n",
              "quality_group          int64\n",
              "quantity_group         int64\n",
              "source_type            int64\n",
              "source_class           int64\n",
              "waterpoint_type        int64\n",
              "status_group           int64\n",
              "new_cons_year          int64\n",
              "year_recorded          int64\n",
              "time_elapsed           int64\n",
              "dtype: object"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 114
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DkrhRhMor_AH",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 90
        },
        "outputId": "b71dc75f-683f-4ac5-af96-4ffc306f3a57"
      },
      "source": [
        "df1['status_group'].value_counts()"
      ],
      "execution_count": 115,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1    26517\n",
              "2    18273\n",
              "3     3498\n",
              "Name: status_group, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 115
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "h8V3s5O5O5Qg",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "df1['status_group'] = df1['status_group'].astype(np.int64)"
      ],
      "execution_count": 116,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "j7h33aGqstfP",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "f24390de-d16b-4b1c-d7b2-fbba7c4145d0"
      },
      "source": [
        "df1['new_cons_year'].value_counts()"
      ],
      "execution_count": 117,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1997    16291\n",
              "2008     2426\n",
              "2009     2306\n",
              "2010     2011\n",
              "2007     1423\n",
              "2006     1329\n",
              "2000     1252\n",
              "2003     1191\n",
              "2011     1032\n",
              "1978      997\n",
              "2004      987\n",
              "2002      954\n",
              "2005      879\n",
              "1999      877\n",
              "2012      836\n",
              "1998      789\n",
              "1995      782\n",
              "1985      767\n",
              "1984      710\n",
              "1982      695\n",
              "1972      679\n",
              "1974      621\n",
              "1990      615\n",
              "1994      595\n",
              "1980      581\n",
              "1996      571\n",
              "1992      512\n",
              "1988      491\n",
              "2001      476\n",
              "1993      463\n",
              "1983      457\n",
              "1975      402\n",
              "1986      391\n",
              "1976      367\n",
              "1970      297\n",
              "1989      293\n",
              "1991      278\n",
              "1987      268\n",
              "1981      217\n",
              "1973      183\n",
              "1979      161\n",
              "1977      153\n",
              "2013      134\n",
              "1971      128\n",
              "1963       83\n",
              "1967       80\n",
              "1968       57\n",
              "1969       55\n",
              "1960       39\n",
              "1962       27\n",
              "1964       27\n",
              "1961       20\n",
              "1965       17\n",
              "1966       16\n",
              "Name: new_cons_year, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 117
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IVCu7fRSyg_k",
        "colab_type": "text"
      },
      "source": [
        "# Visualization"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ewX16ovqSz_y",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 335
        },
        "outputId": "5341062f-f928-412e-c878-2afffd7ac343"
      },
      "source": [
        "#Heat Map\n",
        "hm = sns.heatmap(df1[[\"status_group\", \"gps_height\",\n",
        "                          \"longitude\", \"latitude\",\n",
        "                          \"region_code\",\n",
        "                          \"district_code\", \"population\",\n",
        "                          \"new_cons_year\",\"year_recorded\"]].corr(),annot=True, fmt = \".2f\", cmap = \"BrBG\")"
      ],
      "execution_count": 118,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GAUK25NhTpKt",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 340
        },
        "outputId": "60a91119-c865-483e-8a5f-f100f2afdf2e"
      },
      "source": [
        "hm = sns.heatmap(df1[[\"status_group\", \"quality_group\",\n",
        "                      \"waterpoint_type\",\"new_cons_year\"]].corr(),\n",
        "                 annot=True, fmt = \".2f\", cmap = \"BrBG\")"
      ],
      "execution_count": 119,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Bsiv5wrq0D35",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 280
        },
        "outputId": "d8759630-f747-47a2-e5b0-e6782999fa90"
      },
      "source": [
        "g = sns.countplot(df1[\"status_group\"])\n",
        "g = g.set_xticklabels([\"Functional\",\"Nonfunctional\",\"Functional Needs Repair\"])"
      ],
      "execution_count": 120,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0I3FXA_CWTGr",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 280
        },
        "outputId": "100b1182-61b4-4f26-d85b-ba7f51d1d6a2"
      },
      "source": [
        "g = sns.barplot(x=\"status_group\",y=\"gps_height\",data=df1)\n",
        "g = g.set_ylabel(\"Average GPS Height\")"
      ],
      "execution_count": 121,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "eFhA28ElvQcW",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "outputId": "a17360c5-421c-4be2-e638-c1b19ae5e804"
      },
      "source": [
        "g = sns.barplot(x=\"status_group\",y=\"population\",data=df1)\n",
        "g = g.set_ylabel(\"Population\")"
      ],
      "execution_count": 122,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qdpw7mTpRYH2",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 280
        },
        "outputId": "e7d1a961-e306-442f-9650-85896153407c"
      },
      "source": [
        "g = sns.barplot(x=\"status_group\",y=\"time_elapsed\",data=df1)\n",
        "g = g.set_ylabel(\"Years Since Construction\")"
      ],
      "execution_count": 123,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4KPMdKkNWUaH",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "outputId": "00f0089b-5fe1-4e1f-9583-f60d8d6542ac"
      },
      "source": [
        "g = sns.kdeplot(df1[\"region_code\"][(df1[\"status_group\"] == 1) & (df1[\"region_code\"].notnull())], color=\"Red\", shade = True)\n",
        "g = sns.kdeplot(df1[\"region_code\"][(df1[\"status_group\"] == 2) & (df1[\"region_code\"].notnull())], ax =g, color=\"Blue\", shade= True)\n",
        "g = sns.kdeplot(df1[\"region_code\"][(df1[\"status_group\"] == 3) & (df1[\"region_code\"].notnull())], ax =g, color=\"Yellow\", shade= True)\n",
        "g.set_xlabel(\"Region Code\")\n",
        "g.set_ylabel(\"Frequency\")\n",
        "g = g.legend([\"Functional\",\"Nonfunctional\",\"Functional Needs Repair\"])"
      ],
      "execution_count": 124,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8ShJdvkjnz3B",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 280
        },
        "outputId": "029cd343-a044-4198-ac6b-c65fae4a0afe"
      },
      "source": [
        "g = sns.kdeplot(df1[\"new_cons_year\"][(df1[\"status_group\"] == 1) & (df1[\"new_cons_year\"].notnull())], color=\"Red\", shade = True)\n",
        "g = sns.kdeplot(df1[\"new_cons_year\"][(df1[\"status_group\"] == 2) & (df1[\"new_cons_year\"].notnull())], ax =g, color=\"Blue\", shade= True)\n",
        "g = sns.kdeplot(df1[\"new_cons_year\"][(df1[\"status_group\"] == 3) & (df1[\"new_cons_year\"].notnull())], ax =g, color=\"Yellow\", shade= True)\n",
        "g.set_xlabel(\"Construction Year\")\n",
        "g.set_ylabel(\"Frequency\")\n",
        "g = g.legend([\"Functional\",\"Nonfunctional\",\"Functional Needs Repair\"])"
      ],
      "execution_count": 125,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XQfXNM3FufF-",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 369
        },
        "outputId": "1f97071e-2a46-4b04-830d-7d9ebdf6e84e"
      },
      "source": [
        "g = sns.catplot(x=\"status_group\", y = \"new_cons_year\",data = df1, kind=\"violin\")"
      ],
      "execution_count": 126,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LO2U-Zy4QK_J",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "outputId": "148e6dc3-6716-4761-adc5-438ec7964296"
      },
      "source": [
        "g = sns.kdeplot(df1[\"time_elapsed\"][(df1[\"status_group\"] == 1) & (df1[\"time_elapsed\"].notnull())], color=\"Red\", shade = True)\n",
        "g = sns.kdeplot(df1[\"time_elapsed\"][(df1[\"status_group\"] == 2) & (df1[\"time_elapsed\"].notnull())], ax =g, color=\"Blue\", shade= True)\n",
        "g = sns.kdeplot(df1[\"time_elapsed\"][(df1[\"status_group\"] == 3) & (df1[\"time_elapsed\"].notnull())], ax =g, color=\"Yellow\", shade= True)\n",
        "g.set_xlabel(\"Years Since Construction\")\n",
        "g.set_ylabel(\"Frequency\")\n",
        "g = g.legend([\"Functional\",\"Nonfunctional\",\"Functional Needs Repair\"])"
      ],
      "execution_count": 127,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5BMfelY9IYwt",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 454
        },
        "outputId": "a25da2db-69c5-42a8-dfe1-98e7816502bd"
      },
      "source": [
        "df_test.isnull().sum()"
      ],
      "execution_count": 143,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "id                      0\n",
              "amount_tsh              0\n",
              "gps_height              0\n",
              "longitude               0\n",
              "latitude                0\n",
              "basin                   0\n",
              "region_code             0\n",
              "district_code           0\n",
              "population              0\n",
              "public_meeting        821\n",
              "scheme_management     969\n",
              "permit                737\n",
              "extraction_type         0\n",
              "management_group        0\n",
              "payment_type            0\n",
              "quality_group           0\n",
              "quantity_group          0\n",
              "source_type             0\n",
              "source_class            0\n",
              "waterpoint_type      2820\n",
              "new_cons_year           0\n",
              "year_recorded           0\n",
              "time_elapsed            0\n",
              "dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 143
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cWPHKK9CIh5A",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "df1 = df1.drop(['public_meeting','scheme_management','permit','waterpoint_type'], axis=1)\n",
        "df_test = df_test.drop(['public_meeting','scheme_management','permit','waterpoint_type'], axis=1)"
      ],
      "execution_count": 144,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KllUKzTqIy5m",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 381
        },
        "outputId": "83583bbc-881b-4a98-bfa5-d1fcccfb9b84"
      },
      "source": [
        "df_test.isnull().sum()"
      ],
      "execution_count": 145,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "id                  0\n",
              "amount_tsh          0\n",
              "gps_height          0\n",
              "longitude           0\n",
              "latitude            0\n",
              "basin               0\n",
              "region_code         0\n",
              "district_code       0\n",
              "population          0\n",
              "extraction_type     0\n",
              "management_group    0\n",
              "payment_type        0\n",
              "quality_group       0\n",
              "quantity_group      0\n",
              "source_type         0\n",
              "source_class        0\n",
              "new_cons_year       0\n",
              "year_recorded       0\n",
              "time_elapsed        0\n",
              "dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 145
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "caqgCBOkyo5u",
        "colab_type": "text"
      },
      "source": [
        "# Modeling"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rpaE6wGb7I3Y",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "\n",
        "from collections import Counter\n",
        "\n",
        "from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier, ExtraTreesClassifier, VotingClassifier\n",
        "from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.neural_network import MLPClassifier\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.model_selection import GridSearchCV, cross_val_score, StratifiedKFold, learning_curve"
      ],
      "execution_count": 146,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "88bOW4dptf2p",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 90
        },
        "outputId": "c7af5830-ea74-46d4-e54c-ef3535b19ef0"
      },
      "source": [
        "df1['status_group'].value_counts()"
      ],
      "execution_count": 147,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1    26517\n",
              "2    18273\n",
              "3     3498\n",
              "Name: status_group, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 147
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wIVZ6vEWtCh0",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "Y_train = df1[[\"status_group\"]]\n",
        "X_train = df1.drop(labels = [\"status_group\"],axis = 1)\n",
        "X_test = df_test"
      ],
      "execution_count": 148,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "frL562OM0Lhj",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 72
        },
        "outputId": "8f0fbd28-64b2-4bf0-cc34-6cf41a6ab3d3"
      },
      "source": [
        "print(X_train.shape)\n",
        "print(Y_train.shape)\n",
        "print(X_test.shape)"
      ],
      "execution_count": 149,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(48288, 19)\n",
            "(48288, 1)\n",
            "(14850, 19)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "i4UAsJ35HV6n",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 92
        },
        "outputId": "73b43129-a510-4f06-a817-60cc50027e23"
      },
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "scaler = StandardScaler()  \n",
        "scaler.fit(X_train)\n",
        "\n",
        "X_train = scaler.transform(X_train)\n",
        "X_test = scaler.transform(X_test)"
      ],
      "execution_count": 150,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "[2 1 1 ... 1 1 2]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SsCbVcYpNpqu",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 92
        },
        "outputId": "67498622-83cf-4e2b-b09e-8bbdd92fe5d0"
      },
      "source": [
        "#Logistic Regression\n",
        "\n",
        "lr = LogisticRegression()\n",
        "lr.fit(X_train, Y_train)\n",
        "\n",
        "y_pred = lr.predict(X_test)\n",
        "score = lr.score(X_test, y_pred)\n",
        "print(y_pred)"
      ],
      "execution_count": 162,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "1.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RjiyKZAjN5EH",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pRA9xqQXHz9j",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "df_test['status_group'] = y_pred"
      ],
      "execution_count": 151,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bhE1Mn0RMbfb",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 290
        },
        "outputId": "8efc032a-7a2a-4976-f07e-4d4e3b27d0e2"
      },
      "source": [
        "df_test.status_group[df_test.status_group == 1] = 'functional'\n",
        "df_test.status_group[df_test.status_group == 2] = 'non functional'\n",
        "df_test.status_group[df_test.status_group == 3] = 'functional needs repair'"
      ],
      "execution_count": 159,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \"\"\"Entry point for launching an IPython kernel.\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:3: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  This is separate from the ipykernel package so we can avoid doing imports until\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dNSy2veUJKzL",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 218
        },
        "outputId": "9780b0c0-510c-4c7f-d9e0-83d13b169d41"
      },
      "source": [
        "df_test.head()"
      ],
      "execution_count": 160,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>amount_tsh</th>\n",
              "      <th>gps_height</th>\n",
              "      <th>longitude</th>\n",
              "      <th>latitude</th>\n",
              "      <th>basin</th>\n",
              "      <th>region_code</th>\n",
              "      <th>district_code</th>\n",
              "      <th>population</th>\n",
              "      <th>extraction_type</th>\n",
              "      <th>management_group</th>\n",
              "      <th>payment_type</th>\n",
              "      <th>quality_group</th>\n",
              "      <th>quantity_group</th>\n",
              "      <th>source_type</th>\n",
              "      <th>source_class</th>\n",
              "      <th>new_cons_year</th>\n",
              "      <th>year_recorded</th>\n",
              "      <th>time_elapsed</th>\n",
              "      <th>status_group</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>50785</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1996</td>\n",
              "      <td>35.290799</td>\n",
              "      <td>-4.059696</td>\n",
              "      <td>3</td>\n",
              "      <td>21</td>\n",
              "      <td>3</td>\n",
              "      <td>321</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>2012</td>\n",
              "      <td>2013</td>\n",
              "      <td>1</td>\n",
              "      <td>non functional</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>51630</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1569</td>\n",
              "      <td>36.656709</td>\n",
              "      <td>-3.309214</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>300</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2000</td>\n",
              "      <td>2013</td>\n",
              "      <td>13</td>\n",
              "      <td>functional</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>17168</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1567</td>\n",
              "      <td>34.767863</td>\n",
              "      <td>-5.004344</td>\n",
              "      <td>3</td>\n",
              "      <td>13</td>\n",
              "      <td>2</td>\n",
              "      <td>500</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>2010</td>\n",
              "      <td>2013</td>\n",
              "      <td>3</td>\n",
              "      <td>functional</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>45559</td>\n",
              "      <td>0.0</td>\n",
              "      <td>267</td>\n",
              "      <td>38.058046</td>\n",
              "      <td>-9.418672</td>\n",
              "      <td>7</td>\n",
              "      <td>80</td>\n",
              "      <td>43</td>\n",
              "      <td>250</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1987</td>\n",
              "      <td>2013</td>\n",
              "      <td>26</td>\n",
              "      <td>non functional</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>49871</td>\n",
              "      <td>500.0</td>\n",
              "      <td>1260</td>\n",
              "      <td>35.006123</td>\n",
              "      <td>-10.950412</td>\n",
              "      <td>7</td>\n",
              "      <td>10</td>\n",
              "      <td>3</td>\n",
              "      <td>60</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2000</td>\n",
              "      <td>2013</td>\n",
              "      <td>13</td>\n",
              "      <td>functional</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "      id  amount_tsh  gps_height  ...  year_recorded  time_elapsed    status_group\n",
              "0  50785         0.0        1996  ...           2013             1  non functional\n",
              "1  51630         0.0        1569  ...           2013            13      functional\n",
              "2  17168         0.0        1567  ...           2013             3      functional\n",
              "3  45559         0.0         267  ...           2013            26  non functional\n",
              "4  49871       500.0        1260  ...           2013            13      functional\n",
              "\n",
              "[5 rows x 20 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 160
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QL6b6jzeJMo9",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "outputId": "7c28e8c9-2528-4654-b909-a0ea49a7f10b"
      },
      "source": [
        "from google.colab import files\n",
        "df_test.to_csv('testdata.csv') \n",
        "files.download('testdata.csv')"
      ],
      "execution_count": 161,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "download(\"download_7a2402dc-8eac-4dd4-b564-100b40502849\", \"testdata.csv\", 1367939)"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "y4U0C8aeJ_XZ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 156,
      "outputs": []
    }
  ]
}